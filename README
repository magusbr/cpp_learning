There are six classes on the project: GraphMonteCarlo, GraphShortestPath, GraphSortedNodeDistanceList, GraphNodeDistance, GraphMinimumSpanningTree and finally the Graph class. The purpose of the first class is to calculate the average of distances in a Graph randomly generated. Its constructor will default to a Graph of 50 nodes with a connectivity of 0.4, a minimum distance of 1.0 and maximum distance of 10.0. It will spawn 49 GraphShortestPath objects to calculate the average distance from the first node to all of the other nodes that were generated.
GraphShortestPath class will use the Dijkstra algorithm to calculate the minimum path. It uses class GraphSortedNodeDistanceList as the container for the open/closed sets. GraphSortedNodeDistanceList works only as a sorted vector of elements from GraphNodeDistance type. GraphNodeDistance is a just a representation of a origin node, the destination and the distance between the two.
GraphMinimumSpanningTree inherits from GraphShortestPath class only because of its member variables, which are very much alike. This class is responsible for using the Jarnik and Prim algorithm (similar to Dijkstra) to calculate the minimum spanning tree and its distance.
Graph is obviously the graph representation. It is responsible for all operations involving the creation of the graph, like adding and removing nodes and edges and storing the distance matrix of the graph. The Graph object can be created using random values (connectivity and distance) as used by the GraphMonteCarlo class.

Compile the project using the Makefile.in or the Code::Blocks project file: Graph.cbp